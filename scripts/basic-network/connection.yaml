---
name: basic-network
version: 1.0.0

# The client section used by GO SDK.
client:
  logging:
    level: info
#  cryptoconfig:
#    path: ./scripts/basic-network/crypto-config
  credentialStore:
    path: /tmp/fabricli/state-store
    cryptoStore:
      path: /tmp/fabricli/msp
  organization: Org1
  connection:
    timeout:
      orderer: '300'
      peer:
        endorser: '300'
  BCCSP:
    security:
      enabled: true
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      level: 256
  tlsCerts:
    systemCertPool: false


# channel objects can be constructed based on the content below.
channels:
  mychannel:
#    orderers:
#      - orderer.example.com
    peers:
      peer0.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

# list of participating organizations in this network
organizations:
  Org1:
    mspid: Org1MSP
    cryptoPath: ./scripts/basic-network/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    peers:
      - peer0.org1.example.com
    certificateAuthorities:
      - ca.example.com

  # Orderer Org name
  ordererorg:
    # Membership Service Provider ID for this organization
    mspID: OrdererMSP
    cryptoPath: ./scripts/basic-network/crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp

# List of orderers to send transaction and channel create/update requests to.
orderers:
  orderer.example.com:
    url: grpc://localhost:7050
    grpcOptions:
      ssl-target-name-override: orderer.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false
      tlsCACerts:
        path: ./scripts/basic-network/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

# List of peers to send various requests to, including endorsement, query and event listener registration.
peers:
  peer0.org1.example.com:
    url: grpc://localhost:7051
    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      allow-insecure: false
    tlsCACerts:
      path: ./scripts/basic-network/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem

# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows certificate management to be done via REST APIs.
certificateAuthorities:
  ca.example.com:
    url: http://localhost:7054
    caName: ca.example.com
    tlsCACerts:
      path: ./scripts/basic-network/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem

# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.

# EntityMatchers enable substitution of network hostnames with static configurations
# so that properties can be mapped. Regex can be used for this purpose
# UrlSubstitutionExp can be empty which means the same network hostname will be used
# UrlSubstitutionExp can be given same as mapped peer url, so that mapped peer url can be used
# UrlSubstitutionExp can have golang regex matchers like ${1}.example.${2}:${3} for pattern
# like peer0.org1.example.com:1234 which converts peer0.org1.example.com to peer0.org1.example.com:1234
# sslTargetOverrideUrlSubstitutionExp follow in the same lines as
# SubstitutionExp for the fields gprcOptions.ssl-target-name-override respectively
# In any case mappedHost's config will be used, so mapped host cannot be empty, if entityMatchers are used
#entityMatchers:
#  peer:
#    - pattern: peer0.org1.example.(\w+)
#      urlSubstitutionExp: localhost:7051
#      sslTargetOverrideUrlSubstitutionExp: peer0.org1.example.com
#      mappedHost: peer0.org1.example.com
#
#    - pattern: peer1.org1.example.(\w+)
#      urlSubstitutionExp: localhost:7151
#      sslTargetOverrideUrlSubstitutionExp: peer1.org1.example.com
#      mappedHost: peer1.org1.example.com
#
#    - pattern: peer0.org2.example.(\w+)
#      urlSubstitutionExp: localhost:8051
#      sslTargetOverrideUrlSubstitutionExp: peer0.org2.example.com
#      mappedHost: peer0.org2.example.com
#
#    - pattern: peer1.org2.example.(\w+)
#      urlSubstitutionExp: localhost:9051
#      sslTargetOverrideUrlSubstitutionExp: peer1.org2.example.com
#      mappedHost: peer1.org2.example.com
#
#    - pattern: (\w+).org1.example.(\w+):(\d+)
#      urlSubstitutionExp: localhost:${2}
#      sslTargetOverrideUrlSubstitutionExp: ${1}.org1.example.com
#      mappedHost: ${1}.org1.example.com
#
#    - pattern: (\w+).org2.example.(\w+):(\d+)
#      urlSubstitutionExp: localhost:${2}
#      sslTargetOverrideUrlSubstitutionExp: ${1}.org2.example.com
#      mappedHost: ${1}.org2.example.com
#
#    - pattern: (\w+):7051
#      urlSubstitutionExp: localhost:7051
#      sslTargetOverrideUrlSubstitutionExp: peer0.org1.example.com
#      mappedHost: peer0.org1.example.com
#
#    - pattern: (\w+):7151
#      urlSubstitutionExp: localhost:7151
#      sslTargetOverrideUrlSubstitutionExp: peer1.org1.example.com
#      mappedHost: peer1.org1.example.com
#
#    - pattern: (\w+):8051
#      urlSubstitutionExp: localhost:8051
#      sslTargetOverrideUrlSubstitutionExp: peer0.org2.example.com
#      mappedHost: peer0.org2.example.com
#
#    - pattern: (\w+):9051
#      urlSubstitutionExp: localhost:9051
#      sslTargetOverrideUrlSubstitutionExp: peer1.org2.example.com
#      mappedHost: peer1.org2.example.com
#
#  orderer:
#
#    - pattern: (\w+).example.(\w+)
#      urlSubstitutionExp: localhost:7050
#      sslTargetOverrideUrlSubstitutionExp: orderer.example.com
#      mappedHost: orderer.example.com
#
#    - pattern: (\w+).example.(\w+):(\d+)
#      urlSubstitutionExp: localhost:7050
#      sslTargetOverrideUrlSubstitutionExp: orderer.example.com
#      mappedHost: orderer.example.com
#
#  certificateAuthority:
#    - pattern: (\w+).org1.example.(\w+)
#      urlSubstitutionExp: https://localhost:7054
#      sslTargetOverrideUrlSubstitutionExp: ca.org1.example.com
#      mappedHost: ca.org1.example.com
#
#    - pattern: (\w+).org2.example.(\w+)
#      urlSubstitutionExp: https://localhost:8054
#      sslTargetOverrideUrlSubstitutionExp: ca.org2.example.com
#      mappedHost: ca.org2.example.com